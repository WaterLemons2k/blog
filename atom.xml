<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.waterlemons2k.com</id>
    <title>WaterLemons2k的博客</title>
    <updated>2022-07-01T01:28:11.416Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.waterlemons2k.com"/>
    <link rel="self" href="https://blog.waterlemons2k.com/atom.xml"/>
    <logo>https://blog.waterlemons2k.com/images/avatar.png</logo>
    <icon>https://blog.waterlemons2k.com/favicon.ico</icon>
    <rights>All rights reserved 2022, WaterLemons2k的博客</rights>
    <entry>
        <title type="html"><![CDATA[缩小.img镜像]]></title>
        <id>https://blog.waterlemons2k.com/Shrink-.img/</id>
        <link href="https://blog.waterlemons2k.com/Shrink-.img/">
        </link>
        <updated>2022-07-01T00:59:49.000Z</updated>
        <content type="html"><![CDATA[<p>创建.img镜像时，镜像末尾可能会有大量空闲空间，但可以删除</p>
<ol>
<li>使用<code>fdisk -l .img</code>(将.img替换为镜像文件)查看镜像信息，如下面所示:</li>
</ol>
<pre><code>fdisk -l .img
Disk .img: 5 GiB, 5368709120 bytes, 10485760 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 9A3068F9-8DB8-BFCC-01C406213F67

Device       Start     End Sectors  Size  Type
.img1        2048 4982527 4980480  2.4G  Linux
.img2      4982528 9176831 4194304  2G  Linux
</code></pre>
<ol start="2">
<li>将End(末尾)的最后一列(示例为9176831)替换到下列命令的End处,将镜像文件替换到.img处:<br>
<code>truncate --size=$[(End+1)*512] .img</code></li>
<li>执行后完成!</li>
</ol>
<p>引用:https://binac.io/posts/shrink-disk-image/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群晖DSM启用SHR]]></title>
        <id>https://blog.waterlemons2k.com/DSM-Enable-SHR/</id>
        <link href="https://blog.waterlemons2k.com/DSM-Enable-SHR/">
        </link>
        <updated>2022-06-29T05:48:55.000Z</updated>
        <content type="html"><![CDATA[<p>群晖DSM有一些机型不支持在存储空间管理员中创建SHR(Synology Hybrid RAID)阵列，但可以通过编辑  synoinfo.conf启用:</p>
<ol>
<li>开启控制面板-终端机和 SNMP-启动 SSH 功能，点应用<br>
<img src="https://user-images.githubusercontent.com/62788816/176365661-a4251f36-2d19-4092-a971-8b3d9a7a9d38.png" alt="SSH" loading="lazy"></li>
<li>输入<code>ssh user@ip</code>连接到群晖的SSH(将user替换为群晖管理员用户名，ip替换为群晖ip)，输入管理员密码</li>
<li>输入<code>sudo -i</code>切换到root账户，再次输入管理员账户密码</li>
<li>切换完成后，输入下列命令编辑synoinfo.conf:</li>
</ol>
<pre><code>vi /etc.defaults/synoinfo.conf
</code></pre>
<ol start="5">
<li>按一次esc,输入</li>
</ol>
<pre><code>/supportraidgroup
</code></pre>
<ol start="6">
<li>找到<code>supportraidgroup=&quot;yes&quot;</code>后按回车，按键盘上的Insert或I键，在此行的开头加#号，然后另起一行添加:</li>
</ol>
<pre><code>support_syno_hybrid_raid=”yes”
</code></pre>
<ol start="7">
<li>添加完成后按Esc,输入:wq保存文件。然后重启DSM,完成后可以创建SHR阵列<br>
引用:https://www.vediotalk.com/archives/4154</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows10 0x80070035解决方法]]></title>
        <id>https://blog.waterlemons2k.com/Windows10-0x80070035/</id>
        <link href="https://blog.waterlemons2k.com/Windows10-0x80070035/">
        </link>
        <updated>2022-06-28T15:01:59.000Z</updated>
        <content type="html"><![CDATA[<p>连接服务器时，可能会出现0x80070035错误<br>
<img src="https://user-images.githubusercontent.com/62788816/176213461-7d34b021-49de-4181-aa07-12cef277a6d3.png" alt="1" loading="lazy"></p>
<h2 id="解决方法">解决方法:</h2>
<ol>
<li>打开gpedit.msc,选择管理模板-网络-Lanman工作站-启用不安全的来宾登录<br>
<img src="https://user-images.githubusercontent.com/62788816/176213471-b7476053-432c-4f9c-9ad7-69e0bb361a92.png" alt="2" loading="lazy"></li>
<li>选择已启用，点确定<br>
<img src="https://user-images.githubusercontent.com/62788816/176213474-8182f9d9-8c6f-4c6b-a09b-77f7d2c552c2.png" alt="3" loading="lazy"><br>
再次尝试访问<br>
<img src="https://user-images.githubusercontent.com/62788816/176213477-171fa3f3-ece6-4487-81e4-58445a99a447.png" alt="4" loading="lazy"><br>
成功!</li>
</ol>
<p>引用:https://www.jianshu.com/p/446764c1cc0e</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Gridea在GitHub Pages上搭建博客]]></title>
        <id>https://blog.waterlemons2k.com/Gridea-on-GitHub-Pages/</id>
        <link href="https://blog.waterlemons2k.com/Gridea-on-GitHub-Pages/">
        </link>
        <updated>2022-06-07T12:20:23.000Z</updated>
        <content type="html"><![CDATA[<p>引用:https://gridea.dev/gridea-start/</p>
<ol>
<li>首先点击<a href="https://gridea.dev/#started">这里</a>下载Gridea,然后点击<a href="https://github.com/settings/tokens/new">这里</a>创建Token.</li>
<li>在Note栏填入名称，将Expiration(过期时间)设为No expiration(无限制),最后点Generate token,记下Token.如下图所示:<br>
<img src="https://user-images.githubusercontent.com/62788816/172381653-0813be53-5e81-4fb6-b3db-a1d09646f519.png" alt="Token" loading="lazy"></li>
<li>创建一个仓库。在Repository Name栏填入user.github.io(将user替换为GitHub用户名),将状态设为Public(公开).<br>
<img src="https://user-images.githubusercontent.com/62788816/172386522-8fdc6311-fd57-4aa6-a3fc-140a371c3091.png" alt="repo" loading="lazy"></li>
<li>打开Gridea,平台设置为Github Pages,在域名栏填入user.github.io(或在域名和CNAME栏填入自定义域名),如下图所示:，然后点击检测远程连接检查，检查成功后保存。<br>
<img src="https://user-images.githubusercontent.com/62788816/172388698-b64d9328-d92c-4267-a86c-33ebed35daa9.png" alt="Gridea" loading="lazy"></li>
<li>点击同步后等几分钟，如果访问失败请回到存放Gridea的仓库，点Settings(设置)-Pages,将Source(来源)设置为main,点击Save(保存).保存后再次尝试同步。</li>
<li><img src="https://user-images.githubusercontent.com/62788816/172390675-48204bdb-fb8e-4f89-8df8-32e928bc4fda.png" alt="Pages" loading="lazy"><br>
完成!<br>
相关博客:<a href="/gridea-gitalk">Gridea使用Gitalk评论系统</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安卓使用终端启用adb]]></title>
        <id>https://blog.waterlemons2k.com/Android-Terminal-adb/</id>
        <link href="https://blog.waterlemons2k.com/Android-Terminal-adb/">
        </link>
        <updated>2022-04-21T09:58:43.000Z</updated>
        <content type="html"><![CDATA[<p>一些安卓设备启用了终端却没有启用adb，使用以下命令开启:</p>
<pre><code>su
setprop service.adb.tcp.port 5555
stop adbd
start adbd
</code></pre>
<p>现在可以尝试使用<code>adb connect ip</code>来连接设备!<br>
来源:https://blog.csdn.net/casual_clover/article/details/121992404</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS Code一键配置C/C++]]></title>
        <id>https://blog.waterlemons2k.com/VSCode-Configure-C/</id>
        <link href="https://blog.waterlemons2k.com/VSCode-Configure-C/">
        </link>
        <updated>2022-04-06T09:33:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="autovscenv是一个在vs-code中一键配置cc的程序">AutoVsCEnv是一个在VS Code中一键配置C/C++的程序</h2>
<p><strong><a href="https://github.com/SDchao/AutoVsCEnv_WPF">下载地址1</a> <a href="https://sdchao.lanzoum.com/iB7dE01231be">下载地址2</a> <a href="https://file.waterlemons2k.com/AutoVsCEnv_WPF.V1.994.zip">下载地址3</a></strong><br>
解压后首先运行<strong>AutoVsCEnv_WPF.exe</strong>,点开始<br>
<img src="https://user-images.githubusercontent.com/62788816/161931638-a7d659cc-4479-4c95-ab14-b275cc6311c6.png" alt="First" loading="lazy"><br>
选择MinGW安装位置，点下一步<br>
<img src="https://user-images.githubusercontent.com/62788816/161932099-3a5e290f-d1d9-43c7-b389-50c22b03c7fe.png" alt="MiniGW" loading="lazy"><br>
选择存放C/C++源代码的文件夹，点下一步<br>
<img src="https://user-images.githubusercontent.com/62788816/161932688-1d96d3c8-223e-4e56-9f13-cce22ebbc095.png" alt="Source" loading="lazy"><br>
安装完成后<strong>重启电脑</strong>，开始用VS Code写代码吧!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS Code插件推荐]]></title>
        <id>https://blog.waterlemons2k.com/VS-Code-Extension/</id>
        <link href="https://blog.waterlemons2k.com/VS-Code-Extension/">
        </link>
        <updated>2022-04-06T08:12:43.000Z</updated>
        <content type="html"><![CDATA[<p>这里有一些推荐的VS Code插件</p>
<h2 id="1-chinese-simplified-简体中文">1. <a href="vscode:extension/MS-CEINTL.vscode-language-pack-zh-hans">Chinese (Simplified) (简体中文)</a></h2>
<p>适用于 VS Code 的中文（简体）语言包<br>
<img src="https://user-images.githubusercontent.com/62788816/158343536-fd52e5c2-0550-4f97-82b0-3a97f484ce09.png" alt="Chinese" loading="lazy"></p>
<h2 id="2code-runner">2.<a href="vscode:extension/formulahendry.code-runner">Code Runner</a></h2>
<p>运行多种语言的代码<br>
<img src="https://user-images.githubusercontent.com/62788816/161923587-4a9f4a5f-52bd-4f66-b35d-63098052534d.gif" alt="Code" loading="lazy"></p>
<h2 id="3live-server">3.<a href="vscode:extension/ritwickdey.LiveServer">Live Server</a></h2>
<p>运行HTTP服务器<br>
<img src="https://user-images.githubusercontent.com/62788816/161927489-0deb32f3-01ab-4b5c-b892-0c7e7f3e50c1.gif" alt="HTML" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git删除Commit]]></title>
        <id>https://blog.waterlemons2k.com/Git-Delete-Commit/</id>
        <link href="https://blog.waterlemons2k.com/Git-Delete-Commit/">
        </link>
        <updated>2022-03-22T07:28:58.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>输入以下命令来查看历史提交的commit</li>
</ol>
<pre><code>git log
</code></pre>
<ol start="2">
<li>找到要删除的commit的注释，记住下一行的commit号(如图中红框)<br>
<img src="https://user-images.githubusercontent.com/62788816/159430557-43cb4abd-32a7-49b2-ae04-c0cf9dab02e7.png" alt="log" loading="lazy"></li>
<li>然后执行</li>
</ol>
<pre><code>git rebase -i commit号 
</code></pre>
<p><img src="https://user-images.githubusercontent.com/62788816/159431698-6fc4d4a9-6b67-4101-930c-402fd9afb342.png" alt="pick" loading="lazy"><br>
4. 将要删除的commit号前面的<code>pick</code>替换为<code>drop</code><br>
5. 输入以下命令检查是否删除</p>
<pre><code>git log 
</code></pre>
<ol start="6">
<li>最后输入以下命令推送至仓库即可</li>
</ol>
<pre><code>git push origin HEAD --force
</code></pre>
<p>完成!<br>
引用:https://cloud.tencent.com/developer/article/1511875</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ESXi使用RDM直通]]></title>
        <id>https://blog.waterlemons2k.com/ESXi-RDM/</id>
        <link href="https://blog.waterlemons2k.com/ESXi-RDM/">
        </link>
        <updated>2022-03-13T08:50:31.000Z</updated>
        <content type="html"><![CDATA[<p>引用:https://www.77bx.com/60.html<br>
这是一个ESXi使用裸设备映射(RDM)的教程</p>
<h2 id="启用ssh">启用SSH</h2>
<p>登陆ESXi，然后点击操作-服务-启用安全 Shell (SSH)<br>
<img src="https://user-images.githubusercontent.com/62788816/158052558-98a73ca5-fef2-41d7-a9fa-e0c5bb23401f.png" alt="EnableSSH" loading="lazy"></p>
<h2 id="查询硬盘">查询硬盘</h2>
<ol>
<li>点击存储-设备，找到想要直通的硬盘，记住括号里的内容，这是后文所指的硬盘路径<br>
<img src="https://user-images.githubusercontent.com/62788816/158052758-91810eee-013c-405d-9b64-c6eaf51db572.png" alt="disk" loading="lazy"></li>
<li>点击存储-数据存储-datastore1(或其它)，记住位置:里的内容，这是后文所指的数据存储路径<br>
<img src="https://user-images.githubusercontent.com/62788816/158052937-695a855b-f423-45ef-9f3f-5d948361e9d2.png" alt="volume" loading="lazy"></li>
</ol>
<h2 id="开始直通">开始直通</h2>
<p>使用ssh root@ESXi ip地址或其它软件来连接到SSH，然后执行<br>
<code>vmkfstools -z /vmfs/devices/disks/硬盘路径 数据存储路径/名称.vmdk</code></p>
<p>回到数据存储里检查一下<br>
<img src="https://user-images.githubusercontent.com/62788816/158053412-149f14db-c2ab-4858-8f7b-46aec502a716.png" alt="file" loading="lazy"><br>
完成!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea使用Gitalk评论系统]]></title>
        <id>https://blog.waterlemons2k.com/gridea-gitalk/</id>
        <link href="https://blog.waterlemons2k.com/gridea-gitalk/">
        </link>
        <updated>2022-03-11T09:10:15.000Z</updated>
        <content type="html"><![CDATA[<p>引用:https://xgmm.me/post/gridea-pei-zhi-gitalk-ping-lun-xi-tong/<br>
这是一个如何在Gridea里使用Gitalk的教程<br>
<a href="https://gridea.dev/gridea-start/">Gridea配置教程</a></p>
<h2 id="配置oauth">配置OAuth</h2>
<p>首先，在<a href="https://github.com/settings/applications/new">这里</a>配置OAuth application<br>
<img src="https://user-images.githubusercontent.com/62788816/157833249-1764aa74-853d-4be6-b093-a88fe80ba7ab.png" alt="OAuth" loading="lazy"><br>
点击Register application.记下Client ID，然后点击Generate a new client secret<br>
<img src="https://user-images.githubusercontent.com/62788816/157833764-3a527a08-f75b-4277-b6a6-63aa77904404.png" alt="Generate" loading="lazy"><br>
记下Cleient secrets</p>
<h1 id="配置gridea">配置Gridea</h1>
<p>打开Gridea,点击远程-评论配置，配置如图<br>
<img src="https://user-images.githubusercontent.com/62788816/157835842-ef661e53-99af-4991-a335-a3a894496562.png" alt="Gridea" loading="lazy"><br>
配置完成后点击同步，然后使用Homepage URL里的地址访问。随便打开一篇文章滑到最底部，你会看到:<br>
<img src="https://user-images.githubusercontent.com/62788816/157839908-159433b1-ae91-4456-8558-ec537398af33.png" alt="bind" loading="lazy"><br>
点击使用 GitHub 登录，然后点击Authorize来授权<br>
<img src="https://user-images.githubusercontent.com/62788816/157840257-5513c72a-9e0b-4646-b162-632248da616e.png" alt="Authorize" loading="lazy"><br>
完成!<br>
相关博客:<a href="/Gridea-on-GitHub-Pages">使用Gridea在GitHub Pages上搭建博客</a></p>
]]></content>
    </entry>
</feed>